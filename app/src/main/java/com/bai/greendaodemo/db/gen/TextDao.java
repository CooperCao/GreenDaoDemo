package com.bai.greendaodemo.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bai.greendaodemo.db.bean.Text;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class TextDao extends AbstractDao<Text, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Text.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property NAME = new Property(1, String.class, "NAME", false, "NAME");
        public final static Property AGE = new Property(2, int.class, "AGE", false, "AGE");
        public final static Property OTHER1 = new Property(3, String.class, "OTHER1", false, "OTHER1");
        public final static Property OTHER2 = new Property(4, String.class, "OTHER2", false, "OTHER2");
    }


    public TextDao(DaoConfig config) {
        super(config);
    }
    
    public TextDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Text entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
        stmt.bindLong(3, entity.getAGE());
 
        String OTHER1 = entity.getOTHER1();
        if (OTHER1 != null) {
            stmt.bindString(4, OTHER1);
        }
 
        String OTHER2 = entity.getOTHER2();
        if (OTHER2 != null) {
            stmt.bindString(5, OTHER2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Text entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
        stmt.bindLong(3, entity.getAGE());
 
        String OTHER1 = entity.getOTHER1();
        if (OTHER1 != null) {
            stmt.bindString(4, OTHER1);
        }
 
        String OTHER2 = entity.getOTHER2();
        if (OTHER2 != null) {
            stmt.bindString(5, OTHER2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Text readEntity(Cursor cursor, int offset) {
        Text entity = new Text( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NAME
            cursor.getInt(offset + 2), // AGE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // OTHER1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // OTHER2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Text entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAGE(cursor.getInt(offset + 2));
        entity.setOTHER1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOTHER2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Text entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Text entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Text entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
