package com.bai.greendaodemo.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bai.greendaodemo.db.bean.TextClass;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEXTCLASS".
*/
public class TextClassDao extends AbstractDao<TextClass, Long> {

    public static final String TABLENAME = "TEXTCLASS";

    /**
     * Properties of entity TextClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property NAME = new Property(1, String.class, "NAME", false, "NAME");
        public final static Property CODE = new Property(2, String.class, "CODE", false, "CODE");
        public final static Property NUMBER = new Property(3, String.class, "NUMBER", false, "NUMBER");
        public final static Property OTHER1 = new Property(4, String.class, "OTHER1", false, "OTHER1");
    }


    public TextClassDao(DaoConfig config) {
        super(config);
    }
    
    public TextClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEXTCLASS\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"NAME\" TEXT," + // 1: NAME
                "\"CODE\" TEXT," + // 2: CODE
                "\"NUMBER\" TEXT," + // 3: NUMBER
                "\"OTHER1\" TEXT);"); // 4: OTHER1
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEXTCLASS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TextClass entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
 
        String CODE = entity.getCODE();
        if (CODE != null) {
            stmt.bindString(3, CODE);
        }
 
        String NUMBER = entity.getNUMBER();
        if (NUMBER != null) {
            stmt.bindString(4, NUMBER);
        }
 
        String OTHER1 = entity.getOTHER1();
        if (OTHER1 != null) {
            stmt.bindString(5, OTHER1);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TextClass entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
 
        String CODE = entity.getCODE();
        if (CODE != null) {
            stmt.bindString(3, CODE);
        }
 
        String NUMBER = entity.getNUMBER();
        if (NUMBER != null) {
            stmt.bindString(4, NUMBER);
        }
 
        String OTHER1 = entity.getOTHER1();
        if (OTHER1 != null) {
            stmt.bindString(5, OTHER1);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TextClass readEntity(Cursor cursor, int offset) {
        TextClass entity = new TextClass( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CODE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NUMBER
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // OTHER1
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TextClass entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCODE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNUMBER(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOTHER1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TextClass entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TextClass entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TextClass entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
